https://www.freeformatter.com/xml-to-json-converter.html
https://docs.mongodb.com/manual/reference/operator/aggregation/out/#pipe._S_out
mongoimport --db projectBDD --collection vanilla --file .\pubmed_result_ade.json --jsonArray

use projectBDD

1)
db.vanilla.aggregate(
 [
  {
	$project: {
		_id : 0,
		pmid : "$MedlineCitation.PMID.#text",
		MeSH : "$MedlineCitation.MeshHeadingList.DescriptorName.#text"
	}
   }, {$out : "PMIDMeSHDescriptor"}
 ]
).pretty()


2)
db.vanilla.aggregate(
 [
  {
	$project: {
		_id : 0,
		pmid : "$MedlineCitation.PMID.#text",
		MeSH : { $concatArrays : [
		"$MedlineCitation.MeshHeadingList.DescriptorName.#text",
		"$MedlineCitation.MeshHeadingList.QualifierName.#text"
		]}
		
	}
   },{$out : "PMIDMeSHDescriptorQualifier"}
 ]
).pretty()





3)
db.vanilla.aggregate(
 [
  {
	$project: {
		_id : 0,
		pmid : "$MedlineCitation.PMID.#text",
		title : "$MedlineCitation.Article.Journal.Title",
		text : "$MedlineCitation.Article.Abstract.#text"
		
	}
   },{$out : "PMIDTitleAbstract"}
 ]
).pretty()

4)
db.vanilla.aggregate(
 [
  {
	$project: {
		_id : 0,
		pmid : "$MedlineCitation.PMID.#text",
		MeSH : "$MedlineCitation.MeshHeadingList.DescriptorName.#text",
		title : "$MedlineCitation.Article.Journal.Title",
		text : "$MedlineCitation.Article.Abstract.#text"
		
	}
   },{$out : "PMIDTitleAbstractMeSHDescriptor"}
 ]
).pretty()

5)

db.vanilla.aggregate(
 [
  {
	$project: {
		_id : 0,
		pmid : "$MedlineCitation.PMID.#text",
		MeSH : { $concatArrays : [
		"$MedlineCitation.MeshHeadingList.DescriptorName.#text",
		"$MedlineCitation.MeshHeadingList.QualifierName.#text"
		]},
		title : "$MedlineCitation.Article.Journal.Title",
		text : "$MedlineCitation.Article.Abstract.#text"
		
	}
   },{$out : "PMIDTitleAbstractMeSHDescriptorQualifier"}
 ]
).pretty()


6)

// mapFunction = function() {
// 	for(var i = 0; i< this.articles.article.length; ++i) {
// 		for (var j = 0;j < this.articles.article[i].descriptors.MeshHeading.length; ++j) {
// 			emit({
// 				"UI": this.articles.article[i].descriptors.MeshHeading[j].DescriptorName['UI'],
// 				"text": this.articles.article[i].descriptors.MeshHeading[j].DescriptorName['content']
// 			},
// 			{
// 				pmid: this.articles.article[i].PMID,
// 				data: this.articles.article[i].descriptors.MeshHeading,
// 				isAlone : 1
// 			}
// 			);
// 		}
// 	}
// }

// reduceFunction = function(key, values) {
// 	var result = [];
// 	for(var i = 0; i < values.length; ++i) {
// 		var temp = {pmid: vamies[i].pmid, otherMesh: [] };
// 		for (var j = 0;j < values[i].data.length; j++) {
// 			var mesh = values[i].data[j].DescriptorName;
// 			if (key['text'] != mesh['content']) {
// 				temp.otherMesh.push({'UI': mesh['UI'], value : mesh['content']});
// 			}
// 		}
// 		result.push(temp);
// 	}
// 	return {result}
// }

// db.vanilla.mapReduce(mapFunction,reduceFunction {
// 	out: {inline: 1} ,
// });


a)
b)
c)
d)
e)


7)
a)
b)
c)
d)
e)


expected for question 6/7
{
MSH1 
   {PMID 1,
    [MSH2, MSH5, MSH8]},
 MSH2
   [{PMID1,
   [MSH1, MSH5, MSH8]},
    {PMID2,
    [MSH3, MSH5, MSH8]}],
MSH3
  {PMID2,
  [MSH2, MSH5, MSH8]},
MSH5
  [{PMID 1,
   [MSH1, MSH2, MSH8]},
   {PMID 2,
   [MSH2, MSH3, MSH8]},
   {PMID 3, {MSH8}],
MSH8
  [{PMID1,
   [MSH1, MSH2, MSH5]},
  {PMID2,
   [MSH2, MSH3, MSH5]},
  { PMID3,{MSH5}}]
}

  